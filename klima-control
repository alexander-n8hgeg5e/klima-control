#!/usr/bin/python3
from pylib.syslog_utils import warn,err,info,log,WARN,ERR,INFO,warn_exp,debug,DEBUG,log_exp
from syslog import LOG_LOCAL0 as LOGFACILITY,LOG_USER
from subprocess import check_call,call,check_output,DEVNULL,CalledProcessError
from time import sleep,time
from math import inf
from sys import stderr
from traceback import format_tb

RUN_FILENAMES = {
                'fan_running'       :  'fan_running',      
                'fan_start_time'    :  'fan_start_time',   
                'klima_running'     :  'klima_running',    
                'klima_start_time'  :  'klima_start_time', 
                'state'             :  'state',            
                'target_temp'       :  'target_temp',            
                'hysteresis'        :  'hysteresis',
                'night_sleep'       :  'night_sleep',
                'room_temp'         :  'room_temp',
                }
RUN_SUBDIR = "klima-control"
RUN_PATH   = "/run/" + RUN_SUBDIR
USERNAME  ="klima-control"
GROUPNAME ="klima-control"

LOOPSLEEPTIME=10
COOLDOWN_CYLCES=2
COOLDOWN_CYLCE_SLEEP=20
COOLDOWN_FINAL_FANTIME=20
DEFAULT_HYSTERESIS=1.5
DEFAULT_NIGHT_SLEEP=[]

STATES =    {
            "UNKNOWN"     : -1,
            "OFF"         : 0,
            "STANDBY"     : 1,
            "FREEZING"    : 2,
            "VENTILATING" : 3,
            "COOLDOWN"    : 9,
            "ANY_STATE"   : 99,
            }
for k,v in STATES.items():
    exec("{}={}".format(k,v))

states=[UNKNOWN,UNKNOWN,UNKNOWN]

sw_states = {
                "klima_running" : None,
                "fan_running"        : None,
                }
ensure_state_count=0
ENSURE_STATE_INTERVAL = 10
NUM_INITIAL_ENSURE_STATE=1

class WrongStateError(Exception):
    pass

class InvalidStartTimeError(ValueError):
    pass


#------------------------------------------#
#  low level switch state "base" functions #
#------------------------------------------#
def rf_dev_sw(devcode, on_or_off):
    if on_or_off == 'on':
        add = '1'
    elif on_or_off == 'off':
        add = '0'
    call(["rf", str(devcode) + add ],stdout=DEVNULL)
    sleep(1)
    call(["rf", str(devcode) + add ],stdout=DEVNULL)

def switch_state_tracked( state_name, state , sw_func, on_sw_action ):
    global sw_states
    was_state = sw_states[state_name]
    if not args.test:
        sw_func()
    sw_states[state_name] = state
    write_sw_state(state_name,state)
    if was_state != state:
        on_sw_action()

def write_sw_state(name,state):
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES[name],mode="wt") as f:
        f.write(repr(state))

def read_sw_state(name):
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES[name],mode="rt") as f:
        try:
            return eval(f.read())
        except SyntaxError:
            return UNKNOWN


#-----------------------------------#
#  low level switch state functions #
#-----------------------------------#
def _sw_klima_off():
    rf_dev_sw(24,'off')

def _sw_klima_on():
    rf_dev_sw(24,'on')

def _sw_fan_on():
    rf_dev_sw(12,'on')

def _sw_fan_off():
    rf_dev_sw(12,'off')

def sw_klima_off():
    switch_state_tracked("klima_running",False,_sw_klima_off,lambda :log_runtime("klima"))

def sw_klima_on():
    switch_state_tracked("klima_running",True,_sw_klima_on,lambda:store_start_time("klima"))

def sw_fan_on():
    switch_state_tracked("fan_running",True,_sw_fan_on,lambda:store_start_time("fan"))

def sw_fan_off():
    switch_state_tracked("fan_running",False,_sw_fan_off,lambda:log_runtime("fan"))


#------------------------------------#
# high level state "base" functions  #
#------------------------------------#
def update_state(state2update):
    global states
    # only overwrite past state if state actually differs
    if state2update != states[0]:
        ls=len(states)
        for i in range(ls-1):
            states[ls-i-1]=states[ls-i-2]
        write_state(state2update)
        states[0]=state2update

def write_state(state):                                       
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES["state"],mode="wt") as f: 
        f.write(str(state))                                   

def read_state():
    try:
        return get_check_val(lambda x:int(x),"state")
    except:
        return UNKNOWN

def _run_state_function(from_states,function_state,target_state,function):
    global states
    if not ANY_STATE in from_states:
        if not states[0] in from_states:
            raise WrongStateError   (
                                    "State should be in \"{}\", but state is \"{}\".\nfunction: {}".format(
                                    [ get_state_name(s) for s in from_states ],
                                    get_state_name(states[0]),function)
                                    )
    update_state(function_state)
    if args.verbose:
        print("state="+get_state_name(function_state))
    function()
    update_state(target_state)
    if args.verbose:
        print("state="+get_state_name(target_state))

def run_state_function(from_states,function_state,target_state,function):
    global states
    if states[0] is target_state:
        return
    _run_state_function(from_states,function_state,target_state,function)

def ensure_state(from_states,function_state,target_state,function):
    global states
    global ensure_state_count
    if states[0] != target_state:
        run_state_function(from_states,function_state,target_state,function)
        ensure_state_count=0
        update_state(target_state)
    else:
        ensure_state_count+=1
        if ensure_state_count <= NUM_INITIAL_ENSURE_STATE or ensure_state_count%ENSURE_STATE_INTERVAL==0:
            if args.verbose:
                print("ensuring state="+get_state_name(target_state)+" ... ")
            _run_state_function(from_states,function_state,target_state,function)

def get_state_name(state):
    for k,v in STATES.items():
        if v==state:
            break
    return k


#-----------------------------#
# high level state functions  #
#-----------------------------#
def _cooldown():
    sw_fan_on()
    sw_klima_off()
    for i in range(COOLDOWN_CYLCES):
        sw_klima_on()
        sleep(COOLDOWN_CYLCE_SLEEP)
        sw_klima_off()
    sleep(COOLDOWN_FINAL_FANTIME)
    sw_fan_off()

def _freeze():
    sw_fan_on()
    sw_klima_on()

def _instant_off():
    sw_klima_off()
    sw_fan_off()

def _unhealty_instant_off():
    print("UNHEALTY INSTANT OFF !",file=stderr)
    _instant_off()
    global states
    if states[0] not in [STANDBY,VENTILATING]:
        warn("Unhealty instant shutdown of klima device from state \"{}\" occured.".format(states[0]))

def instant_off():
    ensure_state([STANDBY,OFF],UNKNOWN, OFF, _instant_off)

def unhealty_standby():
    ensure_state([ANY_STATE], UNKNOWN, STANDBY, _instant_off)

def unhealty_instant_off():
    ensure_state([ANY_STATE],UNKNOWN, OFF, _unhealty_instant_off)

def cooldown():
    run_state_function([OFF,COOLDOWN,UNKNOWN,FREEZING],COOLDOWN,STANDBY,_cooldown)

def stop_ventilation():
    ensure_state([OFF,VENTILATING,STANDBY],UNKNOWN,STANDBY,sw_fan_off)

def start_ventilation():
    ensure_state([OFF,STANDBY,VENTILATING],UNKNOWN,VENTILATING,sw_fan_on)

def freeze():
    ensure_state([ANY_STATE],UNKNOWN,FREEZING,_freeze)

def ensure_standby():
    ensure_state([OFF,STANDBY],UNKNOWN,STANDBY,_instant_off)


#---------------------#
#  logging functions  #
#---------------------#
def store_start_time(name):
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES[name+"_start_time"],mode="wt") as f:
        f.write(str(time()))

def log_runtime(name):
    try:
        runtime = time() - read_start_time(name)
        prefix  = name[0].upper()+name[1:]+" " 
        postfix = " for "+str(runtime)+" seconds."
        if not args.test:
            middlefix="has run"
        else:
            middlefix="has been doing a testrun"
        msg=prefix+middlefix+postfix
        log(msg,level=INFO,facility=LOGFACILITY)
        erase_start_time(name)
    except InvalidStartTimeError:
        msg="Invalid klima start time, can not log klima runtime."
        log(msg,level=ERR,facility=LOGFACILITY)
        log(msg,level=ERR,facility=LOG_USER)

def erase_start_time(name):
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES[name+"_start_time"],mode="wt") as f:
        f.write("\"invalid\"")

def read_start_time(name):
    with open("/run/"+RUN_SUBDIR+"/"+RUN_FILENAMES[name+"_start_time"],mode="rt") as f:
        try:
            return float(f.read())
        except ValueError:
            raise InvalidStartTimeError()


#------------#
#  get data  #
#------------#
def get_temp(write_to_file=True):
    cmd=['get_room_temp']
    try:
        T = float(check_output(cmd).decode().strip())
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print(e,file=stderr)
        T = inf
    if write_to_file:
        store_value_to_file("room_temp",T)
    return T

def is_sleeping_time():
    t0,t1 = get_value_from_file('night_sleep')
    lt=localtime()
    current_hour = lt.tm_hour + lt.tm_min/60 + lt.tm_sec/3600
    if t0 > t1:
        d=24-t0
        t1 += d
        current_hour += d
        current_hour %=24
        t0=0
    if t0 < current_hour < t1:
        return True
    return False

def get_value_from_file(name):
    """
    Returns a value or None if nothing could be obtained.
    """
    try:
        p = RUN_PATH + "/" + RUN_FILENAMES[name]
        with open(p) as f:
            v = eval(f.read().strip())
    except Exception as e:
        log_exp( INFO, e )
    return v

def store_value_to_file(name,v):
    try:
        p = RUN_PATH + "/" + RUN_FILENAMES[name]
        with open(p,"wt") as f:
            f.write(repr(v))
    except Exception as e:
        log_exp( ERR, e )

def get_check_val(check_val,name):
    try:
        val = get_value_from_file(name)
        check_val(val)
        return val
    except:
        return None


def check_hysteresis(val):
    val = float(val)
    if not 0 <= val:
        raise ValueError()
    return val

def check_night_sleep(val):
    float(val[0])
    float(val[1])
    return val

def check_target_temp(val):
    float(val)

def get(name):
    return get_check_val(eval("check_"+name),name)

#----------------#
# init functions #
#----------------#
def print_run_files_gen_cmds():
    subdir = "/run/"+RUN_SUBDIR
    print("umask 027")
    print("mkdir -p "+subdir)
    for fn in RUN_FILENAMES.values():
        path = subdir + "/" + fn
        print("touch "+path)
    print("chown -R "+USERNAME+":"+GROUPNAME+" "+subdir)
    print("chmod -R g+rX "+subdir)

def init():
    global states
    global sw_states

    if args.state == UNKNOWN:
        state = read_state()
    update_state(state)

    if args.debug:
        print("DEBUG: init with states={}".format(states))
        print("DEBUG: init with sw_states={}".format(sw_states))
    for name in ["klima_running","fan_running"]:
        sw_states[name] = read_sw_state(name)
    if states[0] == UNKNOWN:
        print("WARNING: Init with unknown state",file=stderr)
        warn("WARNING: Init with unknown state")
        if args.fan_only:
            if args.verbose:
                print("Running cooldown to get valid state ...")
            run_handle_exception(cooldown)
    if not args.target_temp is None:
        store_value_to_file("target_temp",args.target_temp)
    if not args.hysteresis is None:
        store_value_to_file("hysteresis",args.hysteresis)
    else:
        val = get("hysteresis")
        if val is None:
            store_value_to_file("hysteresis",DEFAULT_HYSTERESIS)
    if not args.night_sleep is None:
        store_value_to_file("night_sleep",args.night_sleep)
    else:
        val = get("night_sleep")
        if val is None:
            store_value_to_file("night_sleep",DEFAULT_NIGHT_SLEEP)
    if not get("night_sleep") in [None,[]]:
        global localtime
        from time import localtime


#-------------------#
# control functions #
#-------------------#
def print_exp(e,file=stderr):
    for line in format_tb(e.__traceback__):
        print(line,file=file)
    print("EXCEPTION("+type(e).__name__+"): "+str(e),file=file)

def run_handle_exception(function):
    try:
        function()
    except (Exception, KeyboardInterrupt) as e:
        try:
            if type(e) is KeyboardInterrupt:
                if args.verbose:
                    # newline for KeyboardInterrupt
                    print()
            else:
                warn_exp(e)
                if args.debug:
                    print_exp(e)
            if not args.fan_only:
                cooldown()
            else:
                stop_ventilation()
        except (Exception,KeyboardInterrupt) as ee:
            print(file=stderr)
            unhealty_instant_off()
            # newline for KeyboardInterrupt
            if args.debug:
                print_exp(e)
                print_exp(ee)
            warn_exp(e)
            warn_exp(ee)
    finally:
        instant_off()

def _control_loop():
    while True:
        target     = get("target_temp")
        hysteresis = get("hysteresis")
        mintemp = target-(hysteresis/2)
        maxtemp = target+(hysteresis/2)
        if not get("night_sleep") is None and is_sleeping_time():
            # sleeping time stop
            if args.verbose:
                print("klima sleeping until hour {}".format(get("night_sleep")[1]))
            if not args.fan_only:
                if not states[0] is OFF:
                    cooldown() #cooldown will return if allready standby or cooldown
                ensure_standby()
            else:
                stop_ventilation()
        else:
            temp=get_temp()
            if temp < mintemp:
                if args.verbose:
                    print("T = "+str(temp)+"°C  low")
                if not args.fan_only:
                    cooldown() #cooldown will return if allready standby or cooldown
                    ensure_standby()
                else:
                    stop_ventilation()
            elif temp > maxtemp:
                if args.verbose:
                    print("T = "+str(temp)+"°C  high")
                if not args.fan_only:
                    freeze()
                else:
                    start_ventilation()
            else:
                if args.debug:
                    print("states={}".format([get_state_name(s) for s in states]))
                if args.verbose:
                    print("T = "+str(temp)+"°C  ok")
            
        if sw_states['klima_running']:
            try:
                start_time=read_start_time("klima")
                if args.verbose:
                    print("runtime = {:.3f} [s]".format(time() - start_time))
            except ValueError:
                warn_msg="WARNING: Invalid klima runtime."
                print(warn_msg,file=stderr)
                warn(warn_msg)
    
        sleep(LOOPSLEEPTIME)

def control_loop():
    run_handle_exception(_control_loop)

def parse_args():
    from argparse import ArgumentParser
    ap=ArgumentParser()
    ap.add_argument('-t','--target_temp', type=float, default=27 )
    ap.add_argument('-sd','--shutdown',action="store_true",help="only shutdown and exit")
    ap.add_argument('--test',action="store_true",help="run test",default=False)
    ap.add_argument('--verbose',action="store_true",default=False)
    ap.add_argument('--fan-only',action="store_true",default=False)
    ap.add_argument('--debug',action="store_true",default=False)
    ap.add_argument('--state',action="store",default=UNKNOWN)
    ap.add_argument('--hysteresis',type=float,default=None)
    ap.add_argument('--night-sleep',nargs=2,metavar=('START-SLEEP-TIME','STOP-SLEEP-TIME'),type=float,default=None,help='makes the klima sleep during the time interval')
    ap.add_argument('--testing',action="store_true",default=False)
    ap.add_argument('-G','--print-run-files-gen-cmds',action="store_true",default=False)
    global args
    args=ap.parse_args()
    try:
        args.state=int(args.state)
    except ValueError:
        s=args.state.upper()
        if s in STATES.keys():
            args.state=STATES[s]

if __name__=='__main__':
    parse_args()
    if args.print_run_files_gen_cmds:
        print_run_files_gen_cmds()
        exit()
    if args.test:
        print(args)
        exit()
    init()
    if args.shutdown:
        cooldown()
    else:
        control_loop()

# vim: foldmethod=indent foldlevel=0 foldnestmax=1 :
